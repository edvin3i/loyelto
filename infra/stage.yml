services:
  landing:
    image: edvin3i/loyelto-landing:stage
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.landing-stage.rule=Host(`stage.loyel.to`)
      - traefik.http.routers.landing-stage.entrypoints=websecure
      - traefik.http.routers.landing-stage.tls.certresolver=le
      - traefik.http.services.landing-stage.loadbalancer.server.port=80
    networks: [tnet-stage]
  fastapi:
    image: edvin3i/loyelto-fastapi:stage
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.fastapi-stage.rule=Host(`api.stage.loyel.to`)
      - traefik.http.routers.fastapi-stage.entrypoints=websecure
      - traefik.http.routers.fastapi-stage.tls.certresolver=le
      - traefik.http.services.fastapi-stage.loadbalancer.server.port=8000
      - env=stage
      - project=loyelto
    volumes:
      - ./out/idl:/app/anchor/idl
      - ./out/so:/app/anchor/so
    environment:
      ENV: ${ENV:-stage}
      DOMAIN_NAME: ${DOMAIN_NAME:-stage.loyel.to}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-loyelto_stage}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
      PRIVY_APP_ID: ${PRIVY_APP_ID}
      PRIVY_API_KEY: ${PRIVY_API_KEY}
      PRIVY_API_SECRET: ${PRIVY_API_SECRET}
      TREASURY_KEYPAIR: ${TREASURY_KEYPAIR}
      EXCHANGE_PROGRAM_ID: ${EXCHANGE_PROGRAM_ID:-}
      EXCHANGE_IDL_PATH: /app/anchor/target/idl/exchange.json
      LOYL_TOKEN_PROGRAM_ID: ${LOYL_TOKEN_PROGRAM_ID:-}
      LOYL_IDL_PATH: /app/anchor/target/idl/loyl_token.json
      LOYL_SETTLEMENT_PROGRAM_ID: ${LOYL_SETTLEMENT_PROGRAM_ID:-}
      LOYL_SETTLEMENT_IDL_PATH: /app/anchor/target/idl/loyl_settlement.json
    networks: [tnet-stage]
  # anchor:
  #   image: edvin3i/loyelto-anchor:stage
  #   entrypoint: ["/bin/bash", "-c"]
  #   command: >
  #      "avm use 0.29.0 &&
  #       cd /anchor &&
  #       anchor build &&
  #       anchor deploy --provider.cluster testnet"
  #   environment:
  #     - ANCHOR_WALLET=/root/.config/solana/id.json
  #     - SOLANA_URL=https://api.testnet.solana.com
    volumes:
      # - ./srcs/backend/anchor/target/idl:/app/anchor/target/idl:ro
      # - ./srcs/backend/anchor/target/deploy:/app/anchor/target/deploy:ro
      - ~/.config/solana/id.json:/root/.config/solana/id.json:ro
    networks: [tnet-stage]

  worker:
    build: ../containers/worker
    depends_on:
      - redis
      - fastapi
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/1
    networks: [tnet-stage]

  beat:
    build: ../containers/beat
    depends_on:
      - redis
      - fastapi
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/1
    networks: [tnet-stage]

networks:
  tnet-stage:
    external: true