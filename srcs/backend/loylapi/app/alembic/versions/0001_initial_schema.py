"""initial schema

Revision ID: 0001
Revises: 
Create Date: 2025-06-02 12:38:48.417610

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

from sqlalchemy import text
def _create_extensions(conn):
    if conn.dialect.name == "postgresql":
        conn.execute(text("CREATE EXTENSION IF NOT EXISTS pgcrypto"))
        conn.execute(text("CREATE EXTENSION IF NOT EXISTS citext"))


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    _create_extensions(bind)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('businesses',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"),
                        # require pgcrypto
                        nullable=False,
                    ),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('slug', sa.String(length=64), nullable=False),
    sa.Column('logo_url', sa.String(length=512), nullable=True),
    sa.Column('owner_email', sa.String(length=320), nullable=False),
    sa.Column('owner_pubkey', sa.String(length=44), nullable=False),
    sa.Column('owner_privkey', sa.String(length=88), nullable=False),
    sa.Column('description', sa.String(length=512), nullable=False),
    sa.Column('country', sa.String(length=64), nullable=False),
    sa.Column('city', sa.String(length=128), nullable=False),
    sa.Column('address', sa.String(length=128), nullable=False),
    sa.Column('zip_code', sa.String(length=12), nullable=False),
    sa.Column('rate_loyl', sa.Numeric(precision=18, scale=6), nullable=False, comment='Rate branded token to LOYL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint('length(slug) >= 3', name='check_slug_min_length'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_businesses_owner_email'), ['owner_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_businesses_owner_pubkey'), ['owner_pubkey'], unique=True)
        batch_op.create_index(batch_op.f('ix_businesses_slug'), ['slug'], unique=True)

    op.create_table('celery_task_logs',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('task_id', sa.String(length=50), nullable=False),
    sa.Column('queue', sa.String(length=32), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', 'RETRY', name='task_status_enum'), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('result', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.UniqueConstraint('task_id')
    )
    with op.batch_alter_table('celery_task_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_celery_task_logs_queue'), ['queue'], unique=False)
        batch_op.create_index(batch_op.f('ix_celery_task_logs_status'), ['status'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('privy_id', sa.String(length=64), nullable=False),
    sa.Column('email', postgresql.CITEXT(), nullable=True),
    sa.Column('phone', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint("email <> ''", name='ck_users_email_not_empty'),
    sa.CheckConstraint("phone <> ''", name='ck_users_phone_not_empty'),
    sa.CheckConstraint('(email IS NOT NULL OR phone IS NOT NULL)', name='ck_users_contact_present'),
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_phone'), ['phone'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_privy_id'), ['privy_id'], unique=True)

    op.create_table('business_reviews',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('business_id', sa.UUID(as_uuid=True), nullable=False, comment='Link on business'),
    sa.Column('user_id', sa.UUID(as_uuid=True), nullable=False, comment='Link on user'),
    sa.Column('score', sa.Numeric(precision=3, scale=2), nullable=False, comment='Score from 1.00 to 5.00'),
    sa.Column('review_text', sa.String(length=512), nullable=True, comment='Text of review'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint('score >= 1 AND score <= 5', name='check_score_range'),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    )
    op.create_table('promotion_campaigns',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('business_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('promo_type', sa.Enum('DISCOUNT', name='promo_type_enum'), nullable=False),
    sa.Column('price_points', sa.BigInteger(), nullable=False),
    sa.Column('discount_pct', sa.Numeric(precision=5, scale=2), nullable=False, comment='Percent discount applied to purchase amount'),
    sa.Column('active_from', sa.DateTime(timezone=True), nullable=True),
    sa.Column('active_to', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('discount_pct BETWEEN 1 AND 100', name='check_pct_range'),
    sa.CheckConstraint('price_points > 0', name='check_positive_price'),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('business_id', 'name', name='uq_campaign_name_biz')
    )
    op.create_table('tokens',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('mint', sa.String(length=64), nullable=False),
    sa.Column('symbol', sa.String(length=6), nullable=False),
    sa.Column('coin_logo_url', sa.String(length=512), nullable=True),
    sa.Column('decimals', sa.Integer(), nullable=False),
    sa.Column('business_id', sa.UUID(as_uuid=True), nullable=True),
    sa.Column('settlement_token', sa.Boolean(), nullable=False),
    sa.Column('rate_loyl', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('min_rate', sa.Numeric(precision=18, scale=6), nullable=True),
    sa.Column('max_rate', sa.Numeric(precision=18, scale=6), nullable=True),
    sa.Column('total_supply', sa.BigInteger(), nullable=False, comment='Current totalSupply (base-units)'),
    sa.CheckConstraint('decimals BETWEEN 0 AND 9', name='check_decimals_range'),
    # sa.CheckConstraint('min_rate <= max_rate', name='check_min_le_max_rate'),
    sa.CheckConstraint('(min_rate IS NULL OR max_rate IS NULL OR min_rate <= max_rate)', name = 'check_min_le_max_rate'),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ondelete='SET NULL'),
    sa.UniqueConstraint('symbol')
    )
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tokens_mint'), ['mint'], unique=True)
        batch_op.create_index('uq_single_loyl', ['settlement_token'], unique=True, postgresql_where=sa.text('settlement_token IS TRUE'))

    op.create_table('voucher_templates',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('business_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.String(length=320), nullable=True),
    sa.Column('image_url', sa.String(length=320), nullable=True),
    sa.Column('price_points', sa.BigInteger(), nullable=False),
    sa.Column('supply', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('collection_mint', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('collection_mint')
    )
    op.create_table('wallets',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('pubkey', sa.String(length=44), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('user_id', 'pubkey', name='uq_user_pubkey')
    )
    with op.batch_alter_table('wallets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_wallets_pubkey'), ['pubkey'], unique=True)

    op.create_table('balances',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('wallet_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('token_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.ForeignKeyConstraint(['token_id'], ['tokens.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['wallet_id'], ['wallets.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('wallet_id', 'token_id', name='uq_wallet_token')
    )

    with op.batch_alter_table("balances", schema=None) as batch_op:
        batch_op.create_index("ix_balances_wallet", ["wallet_id"], unique=False)
        batch_op.create_index("ix_balances_token", ["token_id"], unique=False)

    op.create_table('point_txs',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('wallet_id', sa.UUID(as_uuid=True), nullable=True),
    sa.Column('token_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('tx_type', sa.Enum('EARN', 'REDEEM', 'SWAP_IN', 'SWAP_OUT', name='tx_type_enum'), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('fee_bps', sa.Integer(), nullable=True),
    sa.Column('sol_sig', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint('fee_bps IS NULL OR fee_bps BETWEEN 0 AND 10000'),
    sa.ForeignKeyConstraint(['token_id'], ['tokens.id'], ),
    sa.ForeignKeyConstraint(['wallet_id'], ['wallets.id'], ondelete='SET NULL'),
    )
    with op.batch_alter_table('point_txs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_point_txs_wallet_id'), ['wallet_id'], unique=False)
        batch_op.create_index("ix_point_txs_token_id", ["token_id"], unique=False)

    op.create_table('swap_txs',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=True), nullable=True),
    sa.Column('from_token_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('to_token_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('from_amount', sa.BigInteger(), nullable=False),
    sa.Column('to_amount', sa.BigInteger(), nullable=False),
    sa.Column('fee_bps', sa.Integer(), nullable=False),
    sa.Column('sol_sig', sa.String(length=128), nullable=True),
    sa.Column('sol_sig_redeem', sa.String(length=128), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='tx_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint('from_amount > 0 AND to_amount > 0'),
    sa.ForeignKeyConstraint(['from_token_id'], ['tokens.id'], ),
    sa.ForeignKeyConstraint(['to_token_id'], ['tokens.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    )
    with op.batch_alter_table('swap_txs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_swap_txs_user_id'), ['user_id'], unique=False)
        batch_op.create_index("ix_swap_from_token", ["from_token_id"], unique=False)
        batch_op.create_index("ix_swap_to_token", ["to_token_id"], unique=False)

    op.create_table('token_pools',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('token_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('provider', sa.String(length=16), nullable=False),
    sa.Column('init_tx', sa.String(length=88), nullable=False, comment='Signature of the on-chain tx that initialized this pool'),
    sa.Column('balance_token', sa.BigInteger(), nullable=False),
    sa.Column('balance_loyl', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('balance_token >= 0 AND balance_loyl >= 0', name='check_pool_nonnegative'),
    sa.ForeignKeyConstraint(['token_id'], ['tokens.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('token_id', name='uq_token_pool')
    )
    with op.batch_alter_table("token_pools", schema=None) as batch_op:
        batch_op.create_index("ix_token_pools_token", ["token_id"], unique=False)


    op.create_table('voucher_nfts',
    sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text("gen_random_uuid()"), nullable=False),
    sa.Column('template_id', sa.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=True), nullable=True),
    sa.Column('asset_id', sa.String(length=128), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'REDEEMED', 'EXPIRED', name='voucher_status_enum'), nullable=False),
    sa.Column('redeemed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['voucher_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.UniqueConstraint('template_id', 'asset_id', name='uq_template_asset')
    )

    op.execute(
        """
        CREATE OR REPLACE FUNCTION set_updated_at()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at := CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$
        LANGUAGE plpgsql;
        """
    )

    op.execute(
        """
        DO $$
        DECLARE
            r record;
        BEGIN
            FOR r IN
                SELECT table_name
                FROM information_schema.columns
                WHERE column_name = 'updated_at'
                  AND table_schema = 'public'
            LOOP
                EXECUTE format(
                    'CREATE TRIGGER trg_%I_updated
                     BEFORE UPDATE ON %I
                     FOR EACH ROW
                     EXECUTE FUNCTION set_updated_at();',
                    r.table_name,
                    r.table_name
                );
            END LOOP;
        END;
        $$;
        """
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('voucher_nfts')
    op.drop_table('token_pools')
    with op.batch_alter_table("token_pools", schema=None) as batch_op:
        batch_op.drop_index("ix_token_pools_token")

    with op.batch_alter_table('swap_txs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_swap_txs_user_id'))

    op.drop_table('swap_txs')
    with op.batch_alter_table('point_txs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_point_txs_wallet_id'))
        batch_op.drop_index("ix_point_txs_token_id")
        batch_op.drop_index("ix_swap_to_token")
        batch_op.drop_index("ix_swap_from_token")

    op.drop_table('point_txs')
    op.drop_table('balances')
    with op.batch_alter_table("balances", schema=None) as batch_op:
        batch_op.drop_index("ix_balances_token")
        batch_op.drop_index("ix_balances_wallet")

    with op.batch_alter_table('wallets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_wallets_pubkey'))

    op.drop_table('wallets')
    op.drop_table('voucher_templates')
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.drop_index('uq_single_loyl')
        batch_op.drop_index(batch_op.f('ix_tokens_mint'))

    op.drop_table('tokens')
    op.drop_table('promotion_campaigns')
    op.drop_table('business_reviews')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_privy_id'))
        batch_op.drop_index(batch_op.f('ix_users_phone'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('celery_task_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_celery_task_logs_status'))
        batch_op.drop_index(batch_op.f('ix_celery_task_logs_queue'))

    op.drop_table('celery_task_logs')
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_businesses_slug'))
        batch_op.drop_index(batch_op.f('ix_businesses_owner_pubkey'))
        batch_op.drop_index(batch_op.f('ix_businesses_owner_email'))

    op.drop_table('businesses')

    # delete ENUMs
    op.execute("DROP TYPE IF EXISTS task_status_enum CASCADE")
    op.execute("DROP TYPE IF EXISTS tx_type_enum CASCADE")
    op.execute("DROP TYPE IF EXISTS tx_status_enum CASCADE")
    op.execute("DROP TYPE IF EXISTS voucher_status_enum CASCADE")
    op.execute("DROP TYPE IF EXISTS promo_type_enum CASCADE")

    op.execute("DROP FUNCTION IF EXISTS set_updated_at() CASCADE;")

    # ### end Alembic commands ###
