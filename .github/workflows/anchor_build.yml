# name: Build & Deploy Anchor

# on:
#   push:
#     branches: [master, stage]
#     paths:
#       - 'srcs/backend/anchor/**'
#       - 'containers/anchor/**'
#       - '.github/workflows/anchor_build.yml'

# env:
#   IMAGE_NAME: edvin3i/loyelto-anchor

# jobs:
#   build-anchor:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - uses: docker/setup-buildx-action@v3

#       - uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Set image tag
#         run: |
#           if [ "${{ github.ref_name }}" = "master" ]; then
#             echo "IMAGE_TAG=latest" >> $GITHUB_ENV
#           else
#             echo "IMAGE_TAG=stage" >> $GITHUB_ENV
#           fi

#       - name: Build & push Anchor image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: containers/anchor/Dockerfile
#           push: true
#           tags: |
#             ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#             ${{ env.IMAGE_NAME }}:${{ github.sha }}
#           cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
#           cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max

#   deploy-anchor:
#     needs: build-anchor
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set env
#         run: |
#           if [ "${{ github.ref_name }}" = "master" ]; then
#             echo "IMAGE_TAG=latest" >> $GITHUB_ENV
#             echo "STACK=prod" >> $GITHUB_ENV
#           else
#             echo "IMAGE_TAG=stage" >> $GITHUB_ENV
#             echo "STACK=stage" >> $GITHUB_ENV
#           fi

#       - name: Deploy Anchor on VPS
#         uses: appleboy/ssh-action@v1
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             cd /home/loylapp/loyelto
#             git checkout ${{ github.ref_name }}
#             git pull --ff-only
#             docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#             docker compose -f docker-compose.${{ env.STACK }}.yml up -d anchor
#             docker image prune -f
